buildscript {
	ext {
		springBootVersion = '3.5.4'
		sonarVersion = '6.2.0.5505'
		jacocoVersion = '0.8.13'
        lombokVersion = '1.18.38'
        mapstructVersion = '1.5.5.Final'
	}
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'org.sonarqube' version "${sonarVersion}"
    id 'jacoco'
}

tasks.register('jacocoMergedReport', JacocoReport) {
    description = 'Genera un informe consolidado de cobertura JaCoCo para todos los subproyectos'

    dependsOn = subprojects.collect { it.tasks.withType(Test) }

    subprojects.forEach { subproject ->
        dependsOn subproject.tasks.withType(JacocoReport)
    }

    executionData.setFrom(project.fileTree(dir: '.', includes: ['**/build/jacoco/*.exec']))

    subprojects.forEach { subproject ->
        if (subproject.pluginManager.hasPlugin('java')) {
            additionalSourceDirs.from(subproject.sourceSets.main.allSource.srcDirs)
            sourceDirectories.from(subproject.sourceSets.main.allSource.srcDirs)
            classDirectories.from(subproject.sourceSets.main.output)
        }
    }

    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file('reports/jacocoMergedReport/jacocoMergedReport.xml')
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacocoMergedReport/html')
        csv.required = false
    }
}

tasks.sonar.dependsOn jacocoMergedReport

sonar {
    def modules = subprojects.projectDir.collect { "${it.toString().replace(project.projectDir.toString() + "/", "")}" }
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions","**/MainApplication.java, **/config/**, **/model/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacocoMergedReport/jacocoMergedReport.xml"
    }
}

apply from: './main.gradle'
